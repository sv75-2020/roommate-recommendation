package cep;
import com.ftn.sbnz.model.models.User;
import com.ftn.sbnz.model.models.Reservation;
import enums.ReservationStatus;
import com.ftn.sbnz.model.events.DepositPaidEvent;
import com.ftn.sbnz.model.events.DepositNotPaidEvent;
import com.ftn.sbnz.model.models.DepositPaid;
import com.ftn.sbnz.model.models.DepositNotPaid;
import com.ftn.sbnz.model.events.UserBlockedEvent;
import com.ftn.sbnz.model.events.NotifyAdminEvictionEvent;
import java.time.LocalDate;
import java.util.Date
import java.time.LocalDateTime

global com.ftn.sbnz.model.repository.DepositNotPaidRepository depositNotPaidRepository;
global com.ftn.sbnz.model.repository.DepositPaidRepository depositPaidRepository;
global com.ftn.sbnz.model.repository.UserRepository userRepository;
global com.ftn.sbnz.model.repository.ReservationRepository reservationRepository;
global com.ftn.sbnz.model.repository.NotifyAdminEvictionRepository notifyAdminEvictionRepository;


rule "Check reservation confirmation for roommate1"
agenda-group "deposit-cep"
    when
        $reservation : Reservation(paidDeposit == false, $user : roommates.getRoommate1(), $createdTime : created)
        not(DepositPaidEvent(this after[0d, 1d] $createdTime, user==$user))
    then
        System.out.println("deposit not paid by " + $user.getId());
        Date currentDate = new Date();
        DepositNotPaidEvent depositNotPaidEvent = new DepositNotPaidEvent();
        depositNotPaidEvent.setUser($user);
        depositNotPaidEvent.setPaymentDate(currentDate);
        insert(depositNotPaidEvent);
        modify($reservation) {
            setStatus(ReservationStatus.DENIED);
        }
        reservationRepository.save($reservation);
end

rule "Check reservation confirmation for roommate2"
agenda-group "deposit-cep"
    when
        $reservation : Reservation(paidDeposit == false, $user : roommates.getRoommate2(), $createdTime : created, status==ReservationStatus.PENDING)
        not(DepositPaidEvent(this after[0d, 1d] $createdTime, user==$user))
    then
        System.out.println("deposit not paid by " + $user.getId());
        Date currentDate = new Date();
        DepositNotPaidEvent depositNotPaidEvent = new DepositNotPaidEvent();
        depositNotPaidEvent.setUser($user);
        depositNotPaidEvent.setPaymentDate(currentDate);
        depositNotPaidRepository.save(depositNotPaidEvent);
        insert(depositNotPaidEvent);
        modify($reservation) {
            setStatus(ReservationStatus.DENIED);
        }
        reservationRepository.save($reservation);
end

rule "Block user if they have two or more DepositNotPaidEvent in last 30 days"
agenda-group "deposit-cep"
    when
        $user : User($userId : id, blocked == false)
        accumulate(
            $event : DepositNotPaidEvent(user == $user)
            over window:time(30d);
            $count : count($event)
        )
        eval($count >= 2)
    then
        LocalDate currentDate = LocalDate.now();
        NotifyAdminEvictionEvent event = new NotifyAdminEvictionEvent($user, currentDate);

        insert(event);
        notifyAdminEvictionRepository.save(event);
        System.out.println("blocked user " + $user.getId());
        modify($user) {
            setBlocked(true);
        }
        userRepository.save($user);
end