package cep;
import com.ftn.sbnz.model.models.User;
import com.ftn.sbnz.model.models.Reservation;
import enums.ReservationStatus;
import com.ftn.sbnz.model.events.DepositPaidEvent;
import com.ftn.sbnz.model.events.DepositNotPaidEvent;
import com.ftn.sbnz.model.events.UserBlockedEvent;
import java.time.LocalDate;
import java.sql.Date;

rule "Check reservation confirmation for roommate1"
    when
        $reservation : Reservation(paidDeposit == false, $user : roommates.getRoommate1(), $createdTime : created)
        not(DepositPaidEvent(this after[0d, 1d] $createdTime, user==$user))
    then
        System.out.println("deposit not paid by roommate 1");
        Date currentDate = Date.valueOf(LocalDate.now());
        DepositNotPaidEvent depositNotPaidEvent = new DepositNotPaidEvent(1L, currentDate, $user);
        insert(depositNotPaidEvent);
        modify($reservation) {
            setStatus(ReservationStatus.DENIED);
        }
end

rule "Check reservation confirmation for roommate2"
    when
        $reservation : Reservation(paidDeposit == false, $user : roommates.getRoommate2(), $createdTime : created)
        not(DepositPaidEvent(this after[0d, 1d] $createdTime, user==$user))
    then
        System.out.println("deposit not paid by roommate 2");
        Date currentDate = Date.valueOf(LocalDate.now());
        DepositNotPaidEvent depositNotPaidEvent = new DepositNotPaidEvent(2L, currentDate, $user);
        insert(depositNotPaidEvent);
        modify($reservation) {
            setStatus(ReservationStatus.DENIED);
        }
end

rule "Block user if they have two or more DepositNotPaidEvent in last 30 days"
    when
        $user : User($userId : id)
        accumulate(
            $event : DepositNotPaidEvent(user == $user)
            over window:time(30d);
            $count : count($event)
        )
        eval($count >= 2)
    then
        Date currentDate = Date.valueOf(LocalDate.now());
        UserBlockedEvent event = new UserBlockedEvent(1L, currentDate, $user);
        insert(event);
        System.out.println("blocked user");
        modify($user) {
            setBlocked(true);
        }
end