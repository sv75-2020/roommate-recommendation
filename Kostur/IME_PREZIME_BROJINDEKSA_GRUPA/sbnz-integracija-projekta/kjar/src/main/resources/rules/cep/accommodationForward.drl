package cep;

import java.util.HashMap;
import java.util.List;
import com.ftn.sbnz.model.models.User
import com.ftn.sbnz.model.models.Location
import com.ftn.sbnz.model.models.Accommodation
import com.ftn.sbnz.model.models.AccommodationRequirements
import com.ftn.sbnz.model.models.Reservation
import com.ftn.sbnz.model.models.Roommates
import enums.ReservationStatus

global List<com.ftn.sbnz.model.models.User> recommendedRoommates;
global java.lang.Long loggedInId;
global java.util.Map<Long, Integer> accommodationCompatibility;

rule "Remove Occupied Accommodations"
agenda-group "accommodation-forward"
when
    $reservation: Reservation($accommodation:accommodation, status==ReservationStatus.ACTIVE)
then
    retract($accommodation);
end

rule "Doesnt allow pets"
agenda-group "accommodation-forward"
when
    $accommodationRequirements: AccommodationRequirements($petsAllowed:petsAllowed)
    $accommodation: Accommodation($accommodation.petsAllowed!=$petsAllowed)
then
    retract($accommodation);
end

rule "Doesnt have fast wifi"
agenda-group "accommodation-forward"
when
    $accommodationRequirements: AccommodationRequirements($fastInterentNeeded:fastInternet)
    $accommodation: Accommodation($accommodation.isFastInternet()!=$fastInterentNeeded)
then
    retract($accommodation);
end

rule "Doesnt match locations"
agenda-group "accommodation-forward"
when
    $accommodationRequirements: AccommodationRequirements($locations:combinedLocation)
    $accommodation: Accommodation($accommodationLocation:location)
    eval(!$locations.contains($accommodationLocation))
then
    retract($accommodation);
end


rule "Accommodations with not matching price"
agenda-group "accommodation-forward"
when
    $accommodationRequirements: AccommodationRequirements($budget:combinedBudget)
    $accommodation: Accommodation($price:price)
    eval(2*$budget-$price<0)
then
    retract($accommodation)
end

rule "Accommodations with matching price"
agenda-group "accommodation-forward"
when
    $accommodationRequirements: AccommodationRequirements($budget:combinedBudget)
    $accommodation: Accommodation($price:price)
    eval($price==2*$budget)
then
    Integer compatibility = (Integer) accommodationCompatibility.get($accommodation.getId());
    compatibility += 50;
    accommodationCompatibility.put($accommodation.getId(), compatibility);

end

rule "Accommodations with almost matching price"
agenda-group "accommodation-forward"
when
    $accommodationRequirements: AccommodationRequirements($budget:combinedBudget)
    $accommodation: Accommodation($price:price)
    eval(2*$budget-$price>50)
then
    Integer compatibility = (Integer) accommodationCompatibility.get($accommodation.getId());
    compatibility += 100;
    accommodationCompatibility.put($accommodation.getId(), compatibility);
end




