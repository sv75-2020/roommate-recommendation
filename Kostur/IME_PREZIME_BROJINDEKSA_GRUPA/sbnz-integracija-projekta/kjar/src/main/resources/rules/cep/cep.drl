package cep;


import java.util.HashMap;
import com.ftn.sbnz.model.models.User

// Definisanje globalne promenljive za listu preporuƒçenih cimera
global HashMap<com.ftn.sbnz.model.models.User> recommendedRoommates;
global java.lang.Long loggedInId;

rule "Gender Matching"
when
    $loggedInUser: User(loggedInId == id, $gender: gender)
    $otherUser: User(gender == $gender, this != $loggedInUser)
then
    recommendedRoommates.add($otherUser);
end

rule "Budget and Location Matching"
when
    $loggedInUser: User(loggedInId == id, $budget: budget, $locations: locations)
    $otherUser: User(this != $loggedInUser, $otherBudget: budget, 
                     $otherLocations: locations)
    eval(Math.abs($otherBudget - $budget) <= 50 && $locations.containsAll($otherLocations))
then
    compatibilityLevel += 50; 
end

rule "Budget and Location Matching with Small Difference"
when
    $loggedInUser: User(loggedInId == id, $budget: budget, $locations: locations)
    $otherUser: User(this != $loggedInUser, $otherBudget: budget, 
                     $otherLocations: locations)
    eval(Math.abs($budget - $otherBudget) <= 50 && $locations.containsAny($otherLocations))
then
    compatibilityLevel += 30; 
end

rule "Remove Users with Large Budget Difference or No Common Locations"
when
    $loggedInUser: User(loggedInId == id, $budget: budget, $locations: locations)
    $otherUser: User($budgetDifference : Math.abs(budget - $budget), this != $loggedInUser,
                     $otherLocations: locations,
                     $budgetDifference > 100 || not(eval($locations.containsAny($otherLocations))))
then
    retract($otherUser); 
end


rule "No Matching for Users who dislike pets"
when
    $user1: User(loggedInId==id, doesntWantPets == true)
    $user2: User(hasPets == true, this!=$user1)
then
    recommendedRoommates.remove($user2);
    retract($user2); 
end

rule "No Matching for Users who have pets"
when
    $user1: User(loggedInId==id, hasPets == true)
    $user2: User(doesntWantPets == true, this!=$user1)
then
    recommendedRoommates.remove($user2);
    retract($user2); 
end

rule "No Matching for Users who Dislike Smoking"
when
    $user1: User(loggedInId==id, dislikesSmokingIndoors == true)
    $user2: User(smoker == true, this!=$user1)
then
    recommendedRoommates.remove($user2);
    retract($user2); 
end

rule "No Matching for Users who smoke"
when
    $user1: User(loggedInId==id, smoker == true)
    $user2: User(dislikesSmokingIndoors == true, this!=$user1)
then
    recommendedRoommates.remove($user2);
    retract($user2); 
end

rule "No Matching for Users with Different Accommodation Times"
when
    $user1: User(loggedInId==id, $time1: moveInMonth)
    $user2: User(moveInMonth != $time1, this != $user1)
then
    recommendedRoommates.remove($user2);
    retract($user2); 
end


rule "Final Compatibility Level"
salience -1
when
    $user1: User(loggedInId==id)
then
    System.out.println(recommendedRoommates); 
end


